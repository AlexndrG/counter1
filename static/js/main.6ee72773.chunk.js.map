{"version":3,"sources":["components/Display/Display.module.css","components/Button/Button.module.css","components/Display/Display.tsx","components/Button/Button.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["module","exports","Display","props","className","s","display","counterValue","maxValue","finish","Button","button","disabled","disableValue","onClick","callback","name","App","useState","counter","setCounter","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gFACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,OAAS,0B,iBCA9DD,EAAOC,QAAU,CAAC,OAAS,yB,gKCOdC,EAAU,SAACC,GAEpB,OACI,qBAAKC,UAAS,UAAKC,IAAEC,QAAP,YAAkBH,EAAMI,eAAiBJ,EAAMK,SAAWH,IAAEI,OAAS,IAAnF,SACKN,EAAMI,gB,gBCFNG,EAAS,SAACP,GAMnB,OACI,wBACIC,UAAWC,IAAEM,OACbC,SAAUT,EAAMI,eAAiBJ,EAAMU,aACvCC,QARe,WACnBX,EAAMY,YAIN,SAKKZ,EAAMa,QC2BJC,MA1Cf,WAAgB,IAAD,EACmBC,mBAAiB,GADpC,mBACJC,EADI,KACKC,EADL,KAaX,OACI,qBAAKhB,UAAW,MAAhB,SACI,sBAAKA,UAAW,UAAhB,UAEI,cAAC,EAAD,CACIG,aAAcY,EACdX,SArBM,IAwBV,sBAAKJ,UAAW,UAAhB,UACI,cAAC,EAAD,CACIY,KAAM,MACNT,aAAcY,EACdN,aA5BE,EA6BFE,SAxBF,WACVI,EANc,GAOdC,EAAWD,EAAU,MAyBb,cAAC,EAAD,CACIH,KAAM,QACNT,aAAcY,EACdN,aAAc,EACdE,SAzBN,WACVK,EAAW,eCHJC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.6ee72773.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"display\":\"Display_display__3lv7d\",\"finish\":\"Display_finish__1vKqB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__fCrfk\"};","import React from 'react';\r\nimport s from './Display.module.css'\r\n\r\ntype PropsType = {\r\n    counterValue: number\r\n    maxValue: number\r\n}\r\n\r\nexport const Display = (props: PropsType) => {\r\n\r\n    return (\r\n        <div className={`${s.display} ${props.counterValue === props.maxValue ? s.finish : ''}`}>\r\n            {props.counterValue}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Button.module.css'\r\n\r\ntype propsType = {\r\n    name: string\r\n    counterValue: number\r\n    disableValue: number\r\n    callback: () => void\r\n}\r\n\r\nexport const Button = (props: propsType) => {\r\n\r\n    const onClickHandler = () => {\r\n        props.callback()\r\n    }\r\n\r\n    return (\r\n        <button\r\n            className={s.button}\r\n            disabled={props.counterValue === props.disableValue ? true : false}\r\n            onClick={onClickHandler}\r\n        >\r\n            {props.name}\r\n        </button>\r\n    )\r\n}","import React, {useState} from 'react';\r\nimport './App.css';\r\nimport {Display} from './components/Display/Display';\r\nimport {Button} from './components/Button/Button';\r\n\r\nconst MAX_COUNTER_VALUE = 5\r\n\r\nfunction App() {\r\n    const [counter, setCounter] = useState<number>(0)\r\n\r\n    const increment = () => {\r\n        if (counter < MAX_COUNTER_VALUE) {\r\n            setCounter(counter + 1)\r\n        }\r\n    }\r\n\r\n    const reset = () => {\r\n        setCounter(0)\r\n    }\r\n\r\n    return (\r\n        <div className={'app'}>\r\n            <div className={'counter'}>\r\n\r\n                <Display\r\n                    counterValue={counter}\r\n                    maxValue={MAX_COUNTER_VALUE}\r\n                />\r\n\r\n                <div className={'buttons'}>\r\n                    <Button\r\n                        name={'Inc'}\r\n                        counterValue={counter}\r\n                        disableValue={MAX_COUNTER_VALUE}\r\n                        callback={increment}\r\n                    />\r\n\r\n                    <Button\r\n                        name={'Reset'}\r\n                        counterValue={counter}\r\n                        disableValue={0}\r\n                        callback={reset}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}